apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  name: knative-serving
  annotations:
    definition.oam.dev/description: "Knative serving."
spec:
  workload:
    definition:
      apiVersion: serving.knative.dev/v1
      kind: Service
  schematic:
    cue:
      template: |
        output: {
          apiVersion: "serving.knative.dev/v1"
          kind:       "Service"
          metadata: {
            name: context.name
            labels: {
              "app.oam.dev/component": context.name
            }
            annotations: parameter.annotations
          }
          spec: {
            template:
              spec:
                containers: [{
                  image:        parameter.image
                  env:          parameter.env
                  resources:    parameter.resources
                  nodeSelector: parameter.nodeSelector
                  tolerations:  parameter.tolerations
                  affinity:     parameter.affinity
                }]
          }
        }
        parameter: {
          annotations?: {
            [string]: string
          }
          image: string
          env?: [...{
            // +usage=Environment variable name
            name: string
            // +usage=The value of the environment variable
            value?: string
            // +usage=Specifies a source the value of this var should come from
            valueFrom?: {
              // +usage=Selects a key of a secret in the pod's namespace
              secretKeyRef: {
                // +usage=The name of the secret in the pod's namespace to select from
                name: string
                // +usage=The key of the secret to select from. Must be a valid secret key
                key: string
              }
            }
          }]
          resources?: {
            limits?: {
              cpu?: string
              memory?: string
            }
            requests?: {
              cpu?: string
              memory?: string
            }
          }
          nodeSelector?: {
            [string]: string
          }
          tolerations?: [...{
            key: string
            operator?: string
            value?: string
            effect?: string
          }]
          affinity?: {
            nodeAffinity?: {
              requiredDuringSchedulingIgnoredDuringExecution?: {
                nodeSelectorTerms: [...{
                  matchExpressions: [...{
                    key: string
                    operator: string
                    values?: [...string]
                  }]
                }]
              }
            }
          }
        }
